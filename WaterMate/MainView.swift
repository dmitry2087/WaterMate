//      _             _  _                 ____    ___    ___   _____
//   __| | _ __ ___  (_)| |_  _ __  _   _ |___ \  / _ \  ( _ ) |___  |
//  / _` || '_ ` _ \ | || __|| '__|| | | |  __) || | | | / _ \    / /
// | (_| || | | | | || || |_ | |   | |_| | / __/ | |_| || (_) |  / /
//  \__,_||_| |_| |_||_| \__||_|    \__, ||_____| \___/  \___/  /_/
//                                  |___/

//
// MainView.swift
// WaterMate
// –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞—Å—á—ë—Ç–æ–º –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

import SwiftUI
import UserNotifications

struct MainView: View {
    @AppStorage("userAge") private var age: Int = 0 // –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @AppStorage("userWeight") private var weight: Double = 0.0 // –í–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ AppStorage
    @AppStorage("notificationsEnabled") private var notificationsEnabled: Bool = false
    @AppStorage("notificationsPerDay") private var notificationsPerDay: Int = 4
    @AppStorage("startHour") private var startHour: Int = 9
    @AppStorage("endHour") private var endHour: Int = 21
    @AppStorage("useCustomTimes") private var useCustomTimes: Bool = false
    @State private var customTimes: [Date] = [] // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

    // –†–∞—Å—á—ë—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã (–º–ª)
    var waterIntake: Double {
        return weight * 30
    }

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 30) {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã
                    Text("–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã:")
                        .font(.title2)
                        .padding(.top, 16)

                    Text("\(String(format: "%.2f", Double(waterIntake)/1000)) –ª")
                        .font(.largeTitle)
                        .bold()

                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    Toggle("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –≤–æ–¥—ã", isOn: $notificationsEnabled)
                        .padding()
                        .onChange(of: notificationsEnabled) { enabled in
                            if enabled {
                                scheduleNotifications()
                            } else {
                                UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
                            }
                        }

                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    Toggle("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", isOn: $useCustomTimes)
                        .onChange(of: useCustomTimes) { _ in
                            if notificationsEnabled {
                                scheduleNotifications()
                            }
                        }

                    // –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                    if useCustomTimes {
                        VStack(spacing: 12) {
                            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Å–≤–æ–π DatePicker
                            ForEach(0..<notificationsPerDay, id: \.self) { index in
                                DatePicker(
                                    "–í—Ä–µ–º—è \(index + 1)",
                                    selection: Binding(
                                        get: {
                                            if customTimes.indices.contains(index) {
                                                return customTimes[index]
                                            } else {
                                                let calendar = Calendar.current
                                                let defaultHour = startHour + (endHour - startHour) * index / max(notificationsPerDay - 1, 1)
                                                return calendar.date(bySettingHour: defaultHour, minute: 0, second: 0, of: Date()) ?? Date()
                                            }
                                        },
                                        set: { newValue in
                                            if customTimes.indices.contains(index) {
                                                customTimes[index] = newValue
                                            } else if customTimes.count == index {
                                                customTimes.append(newValue)
                                            }
                                        }
                                    ),
                                    displayedComponents: .hourAndMinute
                                )
                                .datePickerStyle(.compact)
                            }
                        }
                        .padding(.horizontal)
                    } else {
                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                        VStack(spacing: 12) {
                            Stepper("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: \(notificationsPerDay)", value: $notificationsPerDay, in: 1...12)
                            HStack {
                                Text("–ù–∞—á–∞–ª–æ:")
                                Spacer()
                                Stepper("\(startHour):00", value: $startHour, in: 0...23)
                            }
                            HStack {
                                Text("–û–∫–æ–Ω—á–∞–Ω–∏–µ:")
                                Spacer()
                                Stepper("\(endHour):00", value: $endHour, in: 0...23)
                            }
                        }
                        .padding(.horizontal)
                    }

                    // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≤–µ—Å–∞
                    NavigationLink(destination: SettingsView()) {
                        Text("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –≤–µ—Å")
                            .font(.headline)
                            .padding()
                            .background(Color.blue.opacity(0.1))
                            .cornerRadius(10)
                    }

                    Spacer(minLength: 24) // –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑—É –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                }
                .padding(.horizontal)
            }
            .navigationTitle("–ì–ª–∞–≤–Ω–∞—è")
            .navigationBarTitleDisplayMode(.large)
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private func scheduleNotifications() {
        let center = UNUserNotificationCenter.current()
        center.removeAllPendingNotificationRequests()

        if useCustomTimes {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–∞–º
            for time in customTimes.prefix(notificationsPerDay) {
                let components = Calendar.current.dateComponents([.hour, .minute], from: time)
                let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: true)
                let content = UNMutableNotificationContent()
                content.title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                content.body = "–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß"
                content.sound = .default
                let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
                center.add(request)
            }
        } else {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –º–µ–∂–¥—É startHour –∏ endHour
            guard endHour > startHour else { return }
            let interval = Double(endHour - startHour) / Double(notificationsPerDay)
            for i in 0..<notificationsPerDay {
                let hour = startHour + Int(round(interval * Double(i)))
                var components = DateComponents()
                components.hour = hour
                components.minute = 0
                let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: true)
                let content = UNMutableNotificationContent()
                content.title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                content.body = "–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß"
                content.sound = .default
                let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
                center.add(request)
            }
        }
    }
}
